
services:
  #############################################
  # Base de données
  #############################################
  
  # TimescaleDB (extension PostgreSQL)
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: ${COMPOSE_PROJECT_NAME}-timescaledb
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - timescaledb-data:/var/lib/postgresql/data
    ports:
      - "${TIMESCALEDB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcs100-network

  # Redis pour le cache et les files d'attente
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME}-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcs100-network

  # Redis Commander pour la gestion de Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${COMPOSE_PROJECT_NAME}-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "${REDIS_COMMANDER_PORT}:8081"
    depends_on:
      - redis
    networks:
      - mcs100-network

  # PgAdmin pour la gestion de TimescaleDB
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${COMPOSE_PROJECT_NAME}-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=True
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - timescaledb
    networks:
      - mcs100-network

  # MongoDB pour les données non structurées
  mongodb:
    image: mongo:6
    container_name: ${COMPOSE_PROJECT_NAME}-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongodb-data:/data/db
    ports:
      - "${MONGODB_PORT}:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcs100-network

  # MongoDB Express pour la gestion de MongoDB
  mongo-express:
    image: mongo-express:latest
    container_name: ${COMPOSE_PROJECT_NAME}-mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
    ports:
      - "${MONGO_EXPRESS_PORT}:8081"
    depends_on:
      - mongodb
    networks:
      - mcs100-network

  #############################################
  # Stockage
  #############################################
  
  # MinIO pour le stockage objet S3-compatible
  minio:
    image: minio/minio:latest
    container_name: ${COMPOSE_PROJECT_NAME}-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data
    ports:
      - "${MINIO_API_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mcs100-network

  # MinIO Client pour initialiser les buckets
  minio-client:
    image: minio/mc:latest
    container_name: ${COMPOSE_PROJECT_NAME}-minio-client
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      /usr/bin/mc mb myminio/raw-data;
      /usr/bin/mc mb myminio/processed-data;
      /usr/bin/mc mb myminio/reports;
      /usr/bin/mc mb myminio/models;
      exit 0;
      "
    networks:
      - mcs100-network

  #############################################
  # Traitement
  #############################################
  
  # Spark Master
  spark-master:
    build:
      context: ./dockerfiles/spark
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-spark-master
    restart: unless-stopped
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "${SPARK_MASTER_PORT}:7077"
      - "${SPARK_MASTER_WEBUI_PORT}:8080"
    networks:
      - mcs100-network

  # Spark Worker 1
  spark-worker-1:
    build:
      context: ./dockerfiles/spark
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-spark-worker-1
    restart: unless-stopped
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "${SPARK_WORKER_WEBUI_PORT}:8081"
    depends_on:
      - spark-master
    networks:
      - mcs100-network

  # Airflow Webserver
  airflow-webserver:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-airflow-webserver
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__SECRET_KEY=secret
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW_GID=${AIRFLOW_GID}
      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_USER}
      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_PASSWORD}
    volumes:
      - ${AIRFLOW_PATH}/dags:/opt/airflow/dags
      - ${AIRFLOW_PATH}/plugins:/opt/airflow/plugins
      - ${AIRFLOW_PATH}/config:/opt/airflow/config
      - ${DBT_PATH}:/opt/airflow/dbt
      - ${DATA_PATH}:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
    ports:
      - "${AIRFLOW_WEBSERVER_PORT}:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      - timescaledb
      - redis
    networks:
      - mcs100-network

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-airflow-scheduler
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW_GID=${AIRFLOW_GID}
    volumes:
      - ${AIRFLOW_PATH}/dags:/opt/airflow/dags
      - ${AIRFLOW_PATH}/plugins:/opt/airflow/plugins
      - ${AIRFLOW_PATH}/config:/opt/airflow/config
      - ${DBT_PATH}:/opt/airflow/dbt
      - ${DATA_PATH}:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
    command: scheduler
    depends_on:
      - airflow-webserver
    networks:
      - mcs100-network

  # Airflow Worker
  airflow-worker:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-airflow-worker
    restart: unless-stopped
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW_GID=${AIRFLOW_GID}
    volumes:
      - ${AIRFLOW_PATH}/dags:/opt/airflow/dags
      - ${AIRFLOW_PATH}/plugins:/opt/airflow/plugins
      - ${AIRFLOW_PATH}/config:/opt/airflow/config
      - ${DBT_PATH}:/opt/airflow/dbt
      - ${DATA_PATH}:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
    command: celery worker
    depends_on:
      - airflow-scheduler
    networks:
      - mcs100-network

  # Airflow Init
  airflow-init:
    build:
      context: ./dockerfiles/airflow
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-airflow-init
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@timescaledb:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - AIRFLOW__CORE__FERNET_KEY=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth
      - AIRFLOW__WEBSERVER__SECRET_KEY=secret
      - AIRFLOW_UID=${AIRFLOW_UID}
      - AIRFLOW_GID=${AIRFLOW_GID}
      - _AIRFLOW_WWW_USER_USERNAME=${AIRFLOW_USER}
      - _AIRFLOW_WWW_USER_PASSWORD=${AIRFLOW_PASSWORD}
    volumes:
      - ${AIRFLOW_PATH}/dags:/opt/airflow/dags
      - ${AIRFLOW_PATH}/plugins:/opt/airflow/plugins
      - ${AIRFLOW_PATH}/config:/opt/airflow/config
      - ${DBT_PATH}:/opt/airflow/dbt
      - ${DATA_PATH}:/opt/airflow/data
      - ./scripts:/opt/airflow/scripts
    command: version
    entrypoint: /bin/bash
    user: "0:0"
    depends_on:
      - timescaledb
    networks:
      - mcs100-network

  #############################################
  # API et Frontend
  #############################################
  
  # FastAPI
  fastapi:
    build:
      context: ./dockerfiles/fastapi
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-fastapi
    restart: unless-stopped
    environment:
      - POSTGRES_HOST=timescaledb
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USER=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./fastapi:/app
    ports:
      - "${FASTAPI_PORT}:8000"
    depends_on:
      - timescaledb
      - redis
      - mongodb
      - minio
    networks:
      - mcs100-network

  # API Simulator
  api-simulator:
    build:
      context: ./dockerfiles/api-simulator
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}-api-simulator
    restart: unless-stopped
    ports:
      - "${API_SIMULATOR_PORT}:8000"
    volumes:
      - ./api-simulator:/app
    networks:
      - mcs100-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: ${COMPOSE_PROJECT_NAME}-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    volumes:
      - ${GRAFANA_PATH}/dashboards:/var/lib/grafana/dashboards
      - ${GRAFANA_PATH}/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - timescaledb
      - prometheus
    networks:
      - mcs100-network

  # Metabase
  metabase:
    image: metabase/metabase:latest
    container_name: ${COMPOSE_PROJECT_NAME}-metabase
    restart: unless-stopped
    environment:
      - MB_DB_TYPE=postgres
      - MB_DB_DBNAME=metabase
      - MB_DB_PORT=5432
      - MB_DB_USER=${POSTGRES_USER}
      - MB_DB_PASS=${POSTGRES_PASSWORD}
      - MB_DB_HOST=timescaledb
      - JAVA_TIMEZONE=UTC
    volumes:
      - ${METABASE_PATH}:/metabase-data
    ports:
      - "${METABASE_PORT}:3000"
    depends_on:
      - timescaledb
    networks:
      - mcs100-network

  #############################################
  # Monitoring
  #############################################
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: ${COMPOSE_PROJECT_NAME}-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mcs100-network

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: ${COMPOSE_PROJECT_NAME}-alertmanager
    restart: unless-stopped
    volumes:
      - ./prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    ports:
      - "${ALERTMANAGER_PORT}:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    depends_on:
      - prometheus
    networks:
      - mcs100-network

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: ${COMPOSE_PROJECT_NAME}-node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "${NODE_EXPORTER_PORT}:9100"
    networks:
      - mcs100-network

networks:
  mcs100-network:
    driver: bridge

volumes:
  timescaledb-data:
  redis-data:
  pgadmin-data:
  mongodb-data:
  minio-data:
  prometheus-data:
  alertmanager-data: