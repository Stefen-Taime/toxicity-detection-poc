services:
  # Service de streaming de données (alternative à Confluent Cloud)
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    ports:
      - "9092:9092"  # Kafka API
      - "9644:9644"  # Redpanda Admin
    environment:
      - REDPANDA_RPC_SERVER_LISTEN_ADDR=0.0.0.0
      - REDPANDA_KAFKA_ADDRESS=0.0.0.0
    command:
      - redpanda
      - start
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --node-id=0
      - --check=false
      - --kafka-addr=0.0.0.0:9092
      - --advertise-kafka-addr=redpanda:9092
      - --rpc-addr=0.0.0.0:33145
      - --advertise-rpc-addr=redpanda:33145
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - toxicity-net
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy: true'"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Interface d'administration pour Redpanda
  redpanda-console:
    image: redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKERS=redpanda:9092
    depends_on:
      - redpanda
    networks:
      - toxicity-net

  # Stockage d'objets compatible S3 (pour les modèles et données)
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - toxicity-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Gestion des modèles ML (alternative à Databricks)
  mlflow:
    build:
      context: ./services/mlflow
      dockerfile: Dockerfile
    container_name: mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minioadmin
      - AWS_SECRET_ACCESS_KEY=minioadmin
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - minio
    networks:
      - toxicity-net

  # Traitement en temps réel (Flink)
  jobmanager:
    build:
      context: ./services/fast-classifier
      dockerfile: Dockerfile.flink
    container_name: jobmanager
    ports:
      - "8081:8081"
      - "6123:6123"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - RAW_MESSAGES_TOPIC=raw-messages
      - CLASSIFIED_MESSAGES_TOPIC=classified-messages
      - NLP_ANALYSIS_REQUIRED_TOPIC=nlp-analysis-required
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - MINIO_ENDPOINT=minio:9000  # Mise à jour pour utiliser le nom de service
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=mlflow
      - TF_CPP_MIN_LOG_LEVEL=2  # Reduce TensorFlow logs
      - CUDA_VISIBLE_DEVICES=-1  # Force CPU mode
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        jobmanager.bind-host: 0.0.0.0
        rest.bind-address: 0.0.0.0
        taskmanager.numberOfTaskSlots: 2
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        heartbeat.timeout: 18000000
        jobmanager.memory.process.size: 4096m
        taskmanager.memory.process.size: 4096m
        blob.server.port: 6124
        query.server.port: 6125
        taskmanager.memory.jvm-overhead.min: 256m
        taskmanager.memory.jvm-overhead.max: 1600m
        taskmanager.memory.task.heap.size: 1024m
        taskmanager.memory.task.off-heap.size: 512m
        taskmanager.memory.network.max: 512m
        taskmanager.memory.managed.size: 512m
        parallelism.default: 1
        python.fn-execution.bundle.size: 1  # Process one element at a time for better error handling
        python.fn-execution.bundle.time: 1000  # Process every second
    command: jobmanager
    volumes:
      - ./services/fast-classifier:/opt/flink/usrlib
    depends_on:
      - redpanda
      - minio
    networks:
      - toxicity-net
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/overview"]
      interval: 10s
      timeout: 5s
      retries: 3

  taskmanager:
    build:
      context: ./services/fast-classifier
      dockerfile: Dockerfile.flink
    container_name: taskmanager
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - RAW_MESSAGES_TOPIC=raw-messages
      - CLASSIFIED_MESSAGES_TOPIC=classified-messages
      - NLP_ANALYSIS_REQUIRED_TOPIC=nlp-analysis-required
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      - MINIO_ENDPOINT=minio:9000  # Mise à jour pour utiliser le nom de service
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - MINIO_BUCKET=mlflow
      - TF_CPP_MIN_LOG_LEVEL=2  # Reduce TensorFlow logs
      - CUDA_VISIBLE_DEVICES=-1  # Force CPU mode
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.bind-host: 0.0.0.0
        taskmanager.numberOfTaskSlots: 2
        state.backend: filesystem
        state.checkpoints.dir: file:///tmp/flink-checkpoints
        heartbeat.timeout: 18000000
        jobmanager.memory.process.size: 4096m
        taskmanager.memory.process.size: 4096m
        blob.server.port: 6124
        query.server.port: 6125
        taskmanager.memory.jvm-overhead.min: 256m
        taskmanager.memory.jvm-overhead.max: 1600m
        taskmanager.memory.task.heap.size: 1024m
        taskmanager.memory.task.off-heap.size: 512m
        taskmanager.memory.network.max: 512m
        taskmanager.memory.managed.size: 512m
        parallelism.default: 1
        python.fn-execution.bundle.size: 1  # Process one element at a time for better error handling
        python.fn-execution.bundle.time: 1000  # Process every second
    command: taskmanager
    volumes:
      - ./services/fast-classifier:/opt/flink/usrlib
    depends_on:
      jobmanager:
        condition: service_healthy
    networks:
      - toxicity-net
    restart: on-failure

  # Proxy d'ingestion des messages
  game-message-proxy:
    build:
      context: ./services/game-message-proxy
      dockerfile: Dockerfile
    container_name: game-message-proxy
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - RAW_MESSAGES_TOPIC=raw-messages
    depends_on:
      - redpanda
    networks:
      - toxicity-net

  # Analyse approfondie (alternative à Databricks)
  deep-analyzer:
    build:
      context: ./services/deep-analyzer
      dockerfile: Dockerfile
    container_name: deep-analyzer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - NLP_ANALYSIS_REQUIRED_TOPIC=nlp-analysis-required
      - NLP_ANALYSIS_RESULTS_TOPIC=nlp-analysis-results
      - MODERATION_REQUIRED_TOPIC=moderation-required
    depends_on:
      - redpanda
      - mlflow
      - minio
    networks:
      - toxicity-net

  # Gestionnaire de décisions
  decision-manager:
    build:
      context: ./services/decision-manager
      dockerfile: Dockerfile
    container_name: decision-manager
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - CLASSIFIED_MESSAGES_TOPIC=classified-messages
      - NLP_ANALYSIS_RESULTS_TOPIC=nlp-analysis-results
      - MODERATION_RESULTS_TOPIC=moderation-results
      - FINAL_DECISIONS_TOPIC=final-decisions
    depends_on:
      - redpanda
    networks:
      - toxicity-net

  # Interface de modération
  moderation-ui:
    build:
      context: ./services/moderation-ui
      dockerfile: Dockerfile
    container_name: moderation-ui
    ports:
      - "8501:8501"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:9092
      - MODERATION_REQUIRED_TOPIC=moderation-required
      - MODERATION_RESULTS_TOPIC=moderation-results
    depends_on:
      - redpanda
    networks:
      - toxicity-net

  # Simulateur de jeu pour les tests
  game-simulator:
    build:
      context: ./services/game-simulator
      dockerfile: Dockerfile
    container_name: game-simulator
    environment:
      - GAME_MESSAGE_PROXY_URL=http://game-message-proxy:8000
      - SIMULATION_INTERVAL_MS=2000
    depends_on:
      - game-message-proxy
    networks:
      - toxicity-net

networks:
  toxicity-net:
    driver: bridge

volumes:
  redpanda_data:
  minio_data: